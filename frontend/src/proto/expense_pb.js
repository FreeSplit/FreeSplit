// source: src/proto/expense.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.freesplit.AddParticipantRequest', null, global);
goog.exportSymbol('proto.freesplit.AddParticipantResponse', null, global);
goog.exportSymbol('proto.freesplit.CreateExpenseRequest', null, global);
goog.exportSymbol('proto.freesplit.CreateExpenseResponse', null, global);
goog.exportSymbol('proto.freesplit.CreateGroupRequest', null, global);
goog.exportSymbol('proto.freesplit.CreateGroupResponse', null, global);
goog.exportSymbol('proto.freesplit.Debt', null, global);
goog.exportSymbol('proto.freesplit.DeleteExpenseRequest', null, global);
goog.exportSymbol('proto.freesplit.DeleteParticipantRequest', null, global);
goog.exportSymbol('proto.freesplit.Expense', null, global);
goog.exportSymbol('proto.freesplit.GetDebtsRequest', null, global);
goog.exportSymbol('proto.freesplit.GetDebtsResponse', null, global);
goog.exportSymbol('proto.freesplit.GetExpenseWithSplitsRequest', null, global);
goog.exportSymbol('proto.freesplit.GetExpenseWithSplitsResponse', null, global);
goog.exportSymbol('proto.freesplit.GetExpensesByGroupRequest', null, global);
goog.exportSymbol('proto.freesplit.GetExpensesByGroupResponse', null, global);
goog.exportSymbol('proto.freesplit.GetGroupRequest', null, global);
goog.exportSymbol('proto.freesplit.GetGroupResponse', null, global);
goog.exportSymbol('proto.freesplit.GetSplitsByParticipantRequest', null, global);
goog.exportSymbol('proto.freesplit.GetSplitsByParticipantResponse', null, global);
goog.exportSymbol('proto.freesplit.Group', null, global);
goog.exportSymbol('proto.freesplit.Participant', null, global);
goog.exportSymbol('proto.freesplit.Split', null, global);
goog.exportSymbol('proto.freesplit.UpdateDebtPaidAmountRequest', null, global);
goog.exportSymbol('proto.freesplit.UpdateDebtPaidAmountResponse', null, global);
goog.exportSymbol('proto.freesplit.UpdateExpenseRequest', null, global);
goog.exportSymbol('proto.freesplit.UpdateExpenseResponse', null, global);
goog.exportSymbol('proto.freesplit.UpdateGroupRequest', null, global);
goog.exportSymbol('proto.freesplit.UpdateGroupResponse', null, global);
goog.exportSymbol('proto.freesplit.UpdateParticipantRequest', null, global);
goog.exportSymbol('proto.freesplit.UpdateParticipantResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.Group = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.Group.repeatedFields_, null);
};
goog.inherits(proto.freesplit.Group, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.Group.displayName = 'proto.freesplit.Group';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.Participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.Participant.displayName = 'proto.freesplit.Participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.Expense = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.Expense.repeatedFields_, null);
};
goog.inherits(proto.freesplit.Expense, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.Expense.displayName = 'proto.freesplit.Expense';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.Split = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.Split, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.Split.displayName = 'proto.freesplit.Split';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.Debt = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.Debt, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.Debt.displayName = 'proto.freesplit.Debt';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetExpensesByGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.GetExpensesByGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetExpensesByGroupRequest.displayName = 'proto.freesplit.GetExpensesByGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetExpensesByGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.GetExpensesByGroupResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.GetExpensesByGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetExpensesByGroupResponse.displayName = 'proto.freesplit.GetExpensesByGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetSplitsByParticipantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.GetSplitsByParticipantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetSplitsByParticipantRequest.displayName = 'proto.freesplit.GetSplitsByParticipantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetSplitsByParticipantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.GetSplitsByParticipantResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.GetSplitsByParticipantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetSplitsByParticipantResponse.displayName = 'proto.freesplit.GetSplitsByParticipantResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetExpenseWithSplitsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.GetExpenseWithSplitsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetExpenseWithSplitsRequest.displayName = 'proto.freesplit.GetExpenseWithSplitsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetExpenseWithSplitsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.GetExpenseWithSplitsResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.GetExpenseWithSplitsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetExpenseWithSplitsResponse.displayName = 'proto.freesplit.GetExpenseWithSplitsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.CreateExpenseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.CreateExpenseRequest.repeatedFields_, null);
};
goog.inherits(proto.freesplit.CreateExpenseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.CreateExpenseRequest.displayName = 'proto.freesplit.CreateExpenseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.CreateExpenseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.CreateExpenseResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.CreateExpenseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.CreateExpenseResponse.displayName = 'proto.freesplit.CreateExpenseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateExpenseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.UpdateExpenseRequest.repeatedFields_, null);
};
goog.inherits(proto.freesplit.UpdateExpenseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateExpenseRequest.displayName = 'proto.freesplit.UpdateExpenseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateExpenseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.UpdateExpenseResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.UpdateExpenseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateExpenseResponse.displayName = 'proto.freesplit.UpdateExpenseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.DeleteExpenseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.DeleteExpenseRequest.repeatedFields_, null);
};
goog.inherits(proto.freesplit.DeleteExpenseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.DeleteExpenseRequest.displayName = 'proto.freesplit.DeleteExpenseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.GetGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetGroupRequest.displayName = 'proto.freesplit.GetGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.GetGroupResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.GetGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetGroupResponse.displayName = 'proto.freesplit.GetGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.CreateGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.CreateGroupRequest.repeatedFields_, null);
};
goog.inherits(proto.freesplit.CreateGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.CreateGroupRequest.displayName = 'proto.freesplit.CreateGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.CreateGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.CreateGroupResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.CreateGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.CreateGroupResponse.displayName = 'proto.freesplit.CreateGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateGroupRequest.displayName = 'proto.freesplit.UpdateGroupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateGroupResponse.displayName = 'proto.freesplit.UpdateGroupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.AddParticipantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.AddParticipantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.AddParticipantRequest.displayName = 'proto.freesplit.AddParticipantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.AddParticipantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.AddParticipantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.AddParticipantResponse.displayName = 'proto.freesplit.AddParticipantResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateParticipantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateParticipantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateParticipantRequest.displayName = 'proto.freesplit.UpdateParticipantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateParticipantResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateParticipantResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateParticipantResponse.displayName = 'proto.freesplit.UpdateParticipantResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.DeleteParticipantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.DeleteParticipantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.DeleteParticipantRequest.displayName = 'proto.freesplit.DeleteParticipantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetDebtsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.GetDebtsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetDebtsRequest.displayName = 'proto.freesplit.GetDebtsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.GetDebtsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.freesplit.GetDebtsResponse.repeatedFields_, null);
};
goog.inherits(proto.freesplit.GetDebtsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.GetDebtsResponse.displayName = 'proto.freesplit.GetDebtsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateDebtPaidAmountRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateDebtPaidAmountRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateDebtPaidAmountRequest.displayName = 'proto.freesplit.UpdateDebtPaidAmountRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.freesplit.UpdateDebtPaidAmountResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.freesplit.UpdateDebtPaidAmountResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.freesplit.UpdateDebtPaidAmountResponse.displayName = 'proto.freesplit.UpdateDebtPaidAmountResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.Group.repeatedFields_ = [7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.Group.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.Group.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.Group} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Group.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
urlSlug: jspb.Message.getFieldWithDefault(msg, 2, ""),
name: jspb.Message.getFieldWithDefault(msg, 3, ""),
settleUpDate: jspb.Message.getFieldWithDefault(msg, 4, 0),
state: jspb.Message.getFieldWithDefault(msg, 5, ""),
currency: jspb.Message.getFieldWithDefault(msg, 6, ""),
participantIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
expenseIdsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.Group}
 */
proto.freesplit.Group.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.Group;
  return proto.freesplit.Group.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.Group} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.Group}
 */
proto.freesplit.Group.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrlSlug(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSettleUpDate(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addParticipantIds(values[i]);
      }
      break;
    case 8:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addExpenseIds(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.Group.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.Group.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.Group} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Group.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUrlSlug();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSettleUpDate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getParticipantIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getExpenseIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.freesplit.Group.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string url_slug = 2;
 * @return {string}
 */
proto.freesplit.Group.prototype.getUrlSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setUrlSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.freesplit.Group.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 settle_up_date = 4;
 * @return {number}
 */
proto.freesplit.Group.prototype.getSettleUpDate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setSettleUpDate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string state = 5;
 * @return {string}
 */
proto.freesplit.Group.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string currency = 6;
 * @return {string}
 */
proto.freesplit.Group.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated int32 participant_ids = 7;
 * @return {!Array<number>}
 */
proto.freesplit.Group.prototype.getParticipantIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setParticipantIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.addParticipantIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.clearParticipantIdsList = function() {
  return this.setParticipantIdsList([]);
};


/**
 * repeated int32 expense_ids = 8;
 * @return {!Array<number>}
 */
proto.freesplit.Group.prototype.getExpenseIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.setExpenseIdsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.addExpenseIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.Group} returns this
 */
proto.freesplit.Group.prototype.clearExpenseIdsList = function() {
  return this.setExpenseIdsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.Participant.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.Participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.Participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Participant.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
groupId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.Participant}
 */
proto.freesplit.Participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.Participant;
  return proto.freesplit.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.Participant}
 */
proto.freesplit.Participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.Participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.freesplit.Participant.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Participant} returns this
 */
proto.freesplit.Participant.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.freesplit.Participant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Participant} returns this
 */
proto.freesplit.Participant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 group_id = 3;
 * @return {number}
 */
proto.freesplit.Participant.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Participant} returns this
 */
proto.freesplit.Participant.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.Expense.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.Expense.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.Expense.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.Expense} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Expense.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
cost: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
emoji: jspb.Message.getFieldWithDefault(msg, 4, ""),
payerId: jspb.Message.getFieldWithDefault(msg, 5, 0),
splitType: jspb.Message.getFieldWithDefault(msg, 6, ""),
splitIdsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
groupId: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.Expense}
 */
proto.freesplit.Expense.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.Expense;
  return proto.freesplit.Expense.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.Expense} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.Expense}
 */
proto.freesplit.Expense.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCost(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmoji(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPayerId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSplitType(value);
      break;
    case 7:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt32() : [reader.readInt32()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSplitIds(values[i]);
      }
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.Expense.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.Expense.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.Expense} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Expense.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCost();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getEmoji();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPayerId();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getSplitType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getSplitIdsList();
  if (f.length > 0) {
    writer.writePackedInt32(
      7,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional int32 id = 1;
 * @return {number}
 */
proto.freesplit.Expense.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.freesplit.Expense.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional double cost = 3;
 * @return {number}
 */
proto.freesplit.Expense.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setCost = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional string emoji = 4;
 * @return {string}
 */
proto.freesplit.Expense.prototype.getEmoji = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setEmoji = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int32 payer_id = 5;
 * @return {number}
 */
proto.freesplit.Expense.prototype.getPayerId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setPayerId = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string split_type = 6;
 * @return {string}
 */
proto.freesplit.Expense.prototype.getSplitType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setSplitType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated int32 split_ids = 7;
 * @return {!Array<number>}
 */
proto.freesplit.Expense.prototype.getSplitIdsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setSplitIdsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.addSplitIds = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.clearSplitIdsList = function() {
  return this.setSplitIdsList([]);
};


/**
 * optional int32 group_id = 8;
 * @return {number}
 */
proto.freesplit.Expense.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Expense} returns this
 */
proto.freesplit.Expense.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.Split.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.Split.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.Split} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Split.toObject = function(includeInstance, msg) {
  var f, obj = {
splitId: jspb.Message.getFieldWithDefault(msg, 1, 0),
groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
expenseId: jspb.Message.getFieldWithDefault(msg, 3, 0),
participantId: jspb.Message.getFieldWithDefault(msg, 4, 0),
splitAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.Split.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.Split;
  return proto.freesplit.Split.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.Split} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.Split.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSplitId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpenseId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSplitAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.Split.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.Split.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.Split} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Split.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSplitId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getExpenseId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSplitAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional int32 split_id = 1;
 * @return {number}
 */
proto.freesplit.Split.prototype.getSplitId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Split} returns this
 */
proto.freesplit.Split.prototype.setSplitId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 group_id = 2;
 * @return {number}
 */
proto.freesplit.Split.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Split} returns this
 */
proto.freesplit.Split.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 expense_id = 3;
 * @return {number}
 */
proto.freesplit.Split.prototype.getExpenseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Split} returns this
 */
proto.freesplit.Split.prototype.setExpenseId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 participant_id = 4;
 * @return {number}
 */
proto.freesplit.Split.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Split} returns this
 */
proto.freesplit.Split.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double split_amount = 5;
 * @return {number}
 */
proto.freesplit.Split.prototype.getSplitAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Split} returns this
 */
proto.freesplit.Split.prototype.setSplitAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.Debt.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.Debt.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.Debt} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Debt.toObject = function(includeInstance, msg) {
  var f, obj = {
debtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
groupId: jspb.Message.getFieldWithDefault(msg, 2, 0),
lenderId: jspb.Message.getFieldWithDefault(msg, 3, 0),
debtorId: jspb.Message.getFieldWithDefault(msg, 4, 0),
debtAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
paidAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.Debt}
 */
proto.freesplit.Debt.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.Debt;
  return proto.freesplit.Debt.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.Debt} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.Debt}
 */
proto.freesplit.Debt.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDebtId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLenderId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDebtorId(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDebtAmount(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPaidAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.Debt.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.Debt.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.Debt} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.Debt.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebtId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLenderId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getDebtorId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getDebtAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getPaidAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
};


/**
 * optional int32 debt_id = 1;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getDebtId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setDebtId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 group_id = 2;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 lender_id = 3;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getLenderId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setLenderId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 debtor_id = 4;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getDebtorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setDebtorId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double debt_amount = 5;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getDebtAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setDebtAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double paid_amount = 6;
 * @return {number}
 */
proto.freesplit.Debt.prototype.getPaidAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.Debt} returns this
 */
proto.freesplit.Debt.prototype.setPaidAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetExpensesByGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetExpensesByGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetExpensesByGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpensesByGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
groupId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetExpensesByGroupRequest}
 */
proto.freesplit.GetExpensesByGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetExpensesByGroupRequest;
  return proto.freesplit.GetExpensesByGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetExpensesByGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetExpensesByGroupRequest}
 */
proto.freesplit.GetExpensesByGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetExpensesByGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetExpensesByGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetExpensesByGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpensesByGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.freesplit.GetExpensesByGroupRequest.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.GetExpensesByGroupRequest} returns this
 */
proto.freesplit.GetExpensesByGroupRequest.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.GetExpensesByGroupResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetExpensesByGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetExpensesByGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetExpensesByGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpensesByGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
expensesList: jspb.Message.toObjectList(msg.getExpensesList(),
    proto.freesplit.Expense.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetExpensesByGroupResponse}
 */
proto.freesplit.GetExpensesByGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetExpensesByGroupResponse;
  return proto.freesplit.GetExpensesByGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetExpensesByGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetExpensesByGroupResponse}
 */
proto.freesplit.GetExpensesByGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.addExpenses(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetExpensesByGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetExpensesByGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetExpensesByGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpensesByGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpensesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Expense expenses = 1;
 * @return {!Array<!proto.freesplit.Expense>}
 */
proto.freesplit.GetExpensesByGroupResponse.prototype.getExpensesList = function() {
  return /** @type{!Array<!proto.freesplit.Expense>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {!Array<!proto.freesplit.Expense>} value
 * @return {!proto.freesplit.GetExpensesByGroupResponse} returns this
*/
proto.freesplit.GetExpensesByGroupResponse.prototype.setExpensesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.freesplit.Expense=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Expense}
 */
proto.freesplit.GetExpensesByGroupResponse.prototype.addExpenses = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.freesplit.Expense, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetExpensesByGroupResponse} returns this
 */
proto.freesplit.GetExpensesByGroupResponse.prototype.clearExpensesList = function() {
  return this.setExpensesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetSplitsByParticipantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetSplitsByParticipantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetSplitsByParticipantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetSplitsByParticipantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
participantId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetSplitsByParticipantRequest}
 */
proto.freesplit.GetSplitsByParticipantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetSplitsByParticipantRequest;
  return proto.freesplit.GetSplitsByParticipantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetSplitsByParticipantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetSplitsByParticipantRequest}
 */
proto.freesplit.GetSplitsByParticipantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetSplitsByParticipantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetSplitsByParticipantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetSplitsByParticipantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetSplitsByParticipantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 participant_id = 1;
 * @return {number}
 */
proto.freesplit.GetSplitsByParticipantRequest.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.GetSplitsByParticipantRequest} returns this
 */
proto.freesplit.GetSplitsByParticipantRequest.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.GetSplitsByParticipantResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetSplitsByParticipantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetSplitsByParticipantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetSplitsByParticipantResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetSplitsByParticipantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetSplitsByParticipantResponse}
 */
proto.freesplit.GetSplitsByParticipantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetSplitsByParticipantResponse;
  return proto.freesplit.GetSplitsByParticipantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetSplitsByParticipantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetSplitsByParticipantResponse}
 */
proto.freesplit.GetSplitsByParticipantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetSplitsByParticipantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetSplitsByParticipantResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetSplitsByParticipantResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetSplitsByParticipantResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Split splits = 1;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.GetSplitsByParticipantResponse.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 1));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.GetSplitsByParticipantResponse} returns this
*/
proto.freesplit.GetSplitsByParticipantResponse.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.GetSplitsByParticipantResponse.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetSplitsByParticipantResponse} returns this
 */
proto.freesplit.GetSplitsByParticipantResponse.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetExpenseWithSplitsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetExpenseWithSplitsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetExpenseWithSplitsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpenseWithSplitsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
expenseId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetExpenseWithSplitsRequest}
 */
proto.freesplit.GetExpenseWithSplitsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetExpenseWithSplitsRequest;
  return proto.freesplit.GetExpenseWithSplitsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetExpenseWithSplitsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetExpenseWithSplitsRequest}
 */
proto.freesplit.GetExpenseWithSplitsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpenseId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetExpenseWithSplitsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetExpenseWithSplitsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetExpenseWithSplitsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpenseWithSplitsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpenseId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 expense_id = 1;
 * @return {number}
 */
proto.freesplit.GetExpenseWithSplitsRequest.prototype.getExpenseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.GetExpenseWithSplitsRequest} returns this
 */
proto.freesplit.GetExpenseWithSplitsRequest.prototype.setExpenseId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.GetExpenseWithSplitsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetExpenseWithSplitsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetExpenseWithSplitsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpenseWithSplitsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
expense: (f = msg.getExpense()) && proto.freesplit.Expense.toObject(includeInstance, f),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse}
 */
proto.freesplit.GetExpenseWithSplitsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetExpenseWithSplitsResponse;
  return proto.freesplit.GetExpenseWithSplitsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetExpenseWithSplitsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse}
 */
proto.freesplit.GetExpenseWithSplitsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.setExpense(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetExpenseWithSplitsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetExpenseWithSplitsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetExpenseWithSplitsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpense();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expense expense = 1;
 * @return {?proto.freesplit.Expense}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.getExpense = function() {
  return /** @type{?proto.freesplit.Expense} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {?proto.freesplit.Expense|undefined} value
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse} returns this
*/
proto.freesplit.GetExpenseWithSplitsResponse.prototype.setExpense = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse} returns this
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.clearExpense = function() {
  return this.setExpense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.hasExpense = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse} returns this
*/
proto.freesplit.GetExpenseWithSplitsResponse.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetExpenseWithSplitsResponse} returns this
 */
proto.freesplit.GetExpenseWithSplitsResponse.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.CreateExpenseRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.CreateExpenseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.CreateExpenseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.CreateExpenseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateExpenseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
expense: (f = msg.getExpense()) && proto.freesplit.Expense.toObject(includeInstance, f),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.CreateExpenseRequest}
 */
proto.freesplit.CreateExpenseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.CreateExpenseRequest;
  return proto.freesplit.CreateExpenseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.CreateExpenseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.CreateExpenseRequest}
 */
proto.freesplit.CreateExpenseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.setExpense(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.CreateExpenseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.CreateExpenseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.CreateExpenseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateExpenseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpense();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expense expense = 1;
 * @return {?proto.freesplit.Expense}
 */
proto.freesplit.CreateExpenseRequest.prototype.getExpense = function() {
  return /** @type{?proto.freesplit.Expense} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {?proto.freesplit.Expense|undefined} value
 * @return {!proto.freesplit.CreateExpenseRequest} returns this
*/
proto.freesplit.CreateExpenseRequest.prototype.setExpense = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.CreateExpenseRequest} returns this
 */
proto.freesplit.CreateExpenseRequest.prototype.clearExpense = function() {
  return this.setExpense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.CreateExpenseRequest.prototype.hasExpense = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.CreateExpenseRequest.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.CreateExpenseRequest} returns this
*/
proto.freesplit.CreateExpenseRequest.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.CreateExpenseRequest.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.CreateExpenseRequest} returns this
 */
proto.freesplit.CreateExpenseRequest.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.CreateExpenseResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.CreateExpenseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.CreateExpenseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.CreateExpenseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateExpenseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
expense: (f = msg.getExpense()) && proto.freesplit.Expense.toObject(includeInstance, f),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.CreateExpenseResponse}
 */
proto.freesplit.CreateExpenseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.CreateExpenseResponse;
  return proto.freesplit.CreateExpenseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.CreateExpenseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.CreateExpenseResponse}
 */
proto.freesplit.CreateExpenseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.setExpense(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.CreateExpenseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.CreateExpenseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.CreateExpenseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateExpenseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpense();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expense expense = 1;
 * @return {?proto.freesplit.Expense}
 */
proto.freesplit.CreateExpenseResponse.prototype.getExpense = function() {
  return /** @type{?proto.freesplit.Expense} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {?proto.freesplit.Expense|undefined} value
 * @return {!proto.freesplit.CreateExpenseResponse} returns this
*/
proto.freesplit.CreateExpenseResponse.prototype.setExpense = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.CreateExpenseResponse} returns this
 */
proto.freesplit.CreateExpenseResponse.prototype.clearExpense = function() {
  return this.setExpense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.CreateExpenseResponse.prototype.hasExpense = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.CreateExpenseResponse.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.CreateExpenseResponse} returns this
*/
proto.freesplit.CreateExpenseResponse.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.CreateExpenseResponse.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.CreateExpenseResponse} returns this
 */
proto.freesplit.CreateExpenseResponse.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.UpdateExpenseRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateExpenseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateExpenseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateExpenseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateExpenseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
expense: (f = msg.getExpense()) && proto.freesplit.Expense.toObject(includeInstance, f),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance),
participantId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateExpenseRequest}
 */
proto.freesplit.UpdateExpenseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateExpenseRequest;
  return proto.freesplit.UpdateExpenseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateExpenseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateExpenseRequest}
 */
proto.freesplit.UpdateExpenseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.setExpense(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateExpenseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateExpenseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateExpenseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateExpenseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpense();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional Expense expense = 1;
 * @return {?proto.freesplit.Expense}
 */
proto.freesplit.UpdateExpenseRequest.prototype.getExpense = function() {
  return /** @type{?proto.freesplit.Expense} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {?proto.freesplit.Expense|undefined} value
 * @return {!proto.freesplit.UpdateExpenseRequest} returns this
*/
proto.freesplit.UpdateExpenseRequest.prototype.setExpense = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.UpdateExpenseRequest} returns this
 */
proto.freesplit.UpdateExpenseRequest.prototype.clearExpense = function() {
  return this.setExpense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.UpdateExpenseRequest.prototype.hasExpense = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.UpdateExpenseRequest.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.UpdateExpenseRequest} returns this
*/
proto.freesplit.UpdateExpenseRequest.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.UpdateExpenseRequest.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.UpdateExpenseRequest} returns this
 */
proto.freesplit.UpdateExpenseRequest.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};


/**
 * optional int32 participant_id = 3;
 * @return {number}
 */
proto.freesplit.UpdateExpenseRequest.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.UpdateExpenseRequest} returns this
 */
proto.freesplit.UpdateExpenseRequest.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.UpdateExpenseResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateExpenseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateExpenseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateExpenseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateExpenseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
expense: (f = msg.getExpense()) && proto.freesplit.Expense.toObject(includeInstance, f),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateExpenseResponse}
 */
proto.freesplit.UpdateExpenseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateExpenseResponse;
  return proto.freesplit.UpdateExpenseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateExpenseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateExpenseResponse}
 */
proto.freesplit.UpdateExpenseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Expense;
      reader.readMessage(value,proto.freesplit.Expense.deserializeBinaryFromReader);
      msg.setExpense(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateExpenseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateExpenseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateExpenseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateExpenseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpense();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Expense.serializeBinaryToWriter
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * optional Expense expense = 1;
 * @return {?proto.freesplit.Expense}
 */
proto.freesplit.UpdateExpenseResponse.prototype.getExpense = function() {
  return /** @type{?proto.freesplit.Expense} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Expense, 1));
};


/**
 * @param {?proto.freesplit.Expense|undefined} value
 * @return {!proto.freesplit.UpdateExpenseResponse} returns this
*/
proto.freesplit.UpdateExpenseResponse.prototype.setExpense = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.UpdateExpenseResponse} returns this
 */
proto.freesplit.UpdateExpenseResponse.prototype.clearExpense = function() {
  return this.setExpense(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.UpdateExpenseResponse.prototype.hasExpense = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.UpdateExpenseResponse.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.UpdateExpenseResponse} returns this
*/
proto.freesplit.UpdateExpenseResponse.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.UpdateExpenseResponse.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.UpdateExpenseResponse} returns this
 */
proto.freesplit.UpdateExpenseResponse.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.DeleteExpenseRequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.DeleteExpenseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.DeleteExpenseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.DeleteExpenseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.DeleteExpenseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
expenseId: jspb.Message.getFieldWithDefault(msg, 1, 0),
splitsList: jspb.Message.toObjectList(msg.getSplitsList(),
    proto.freesplit.Split.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.DeleteExpenseRequest}
 */
proto.freesplit.DeleteExpenseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.DeleteExpenseRequest;
  return proto.freesplit.DeleteExpenseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.DeleteExpenseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.DeleteExpenseRequest}
 */
proto.freesplit.DeleteExpenseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setExpenseId(value);
      break;
    case 2:
      var value = new proto.freesplit.Split;
      reader.readMessage(value,proto.freesplit.Split.deserializeBinaryFromReader);
      msg.addSplits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.DeleteExpenseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.DeleteExpenseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.DeleteExpenseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.DeleteExpenseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getExpenseId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSplitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Split.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 expense_id = 1;
 * @return {number}
 */
proto.freesplit.DeleteExpenseRequest.prototype.getExpenseId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.DeleteExpenseRequest} returns this
 */
proto.freesplit.DeleteExpenseRequest.prototype.setExpenseId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated Split splits = 2;
 * @return {!Array<!proto.freesplit.Split>}
 */
proto.freesplit.DeleteExpenseRequest.prototype.getSplitsList = function() {
  return /** @type{!Array<!proto.freesplit.Split>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Split, 2));
};


/**
 * @param {!Array<!proto.freesplit.Split>} value
 * @return {!proto.freesplit.DeleteExpenseRequest} returns this
*/
proto.freesplit.DeleteExpenseRequest.prototype.setSplitsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Split=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Split}
 */
proto.freesplit.DeleteExpenseRequest.prototype.addSplits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Split, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.DeleteExpenseRequest} returns this
 */
proto.freesplit.DeleteExpenseRequest.prototype.clearSplitsList = function() {
  return this.setSplitsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
urlSlug: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetGroupRequest}
 */
proto.freesplit.GetGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetGroupRequest;
  return proto.freesplit.GetGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetGroupRequest}
 */
proto.freesplit.GetGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrlSlug(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url_slug = 1;
 * @return {string}
 */
proto.freesplit.GetGroupRequest.prototype.getUrlSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.GetGroupRequest} returns this
 */
proto.freesplit.GetGroupRequest.prototype.setUrlSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.GetGroupResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
group: (f = msg.getGroup()) && proto.freesplit.Group.toObject(includeInstance, f),
participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.freesplit.Participant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetGroupResponse}
 */
proto.freesplit.GetGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetGroupResponse;
  return proto.freesplit.GetGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetGroupResponse}
 */
proto.freesplit.GetGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Group;
      reader.readMessage(value,proto.freesplit.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.freesplit.Participant;
      reader.readMessage(value,proto.freesplit.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Group.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.freesplit.Group}
 */
proto.freesplit.GetGroupResponse.prototype.getGroup = function() {
  return /** @type{?proto.freesplit.Group} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Group, 1));
};


/**
 * @param {?proto.freesplit.Group|undefined} value
 * @return {!proto.freesplit.GetGroupResponse} returns this
*/
proto.freesplit.GetGroupResponse.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.GetGroupResponse} returns this
 */
proto.freesplit.GetGroupResponse.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.GetGroupResponse.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Participant participants = 2;
 * @return {!Array<!proto.freesplit.Participant>}
 */
proto.freesplit.GetGroupResponse.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.freesplit.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Participant, 2));
};


/**
 * @param {!Array<!proto.freesplit.Participant>} value
 * @return {!proto.freesplit.GetGroupResponse} returns this
*/
proto.freesplit.GetGroupResponse.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Participant}
 */
proto.freesplit.GetGroupResponse.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetGroupResponse} returns this
 */
proto.freesplit.GetGroupResponse.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.CreateGroupRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.CreateGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.CreateGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.CreateGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
currency: jspb.Message.getFieldWithDefault(msg, 2, ""),
participantNamesList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.CreateGroupRequest}
 */
proto.freesplit.CreateGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.CreateGroupRequest;
  return proto.freesplit.CreateGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.CreateGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.CreateGroupRequest}
 */
proto.freesplit.CreateGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addParticipantNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.CreateGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.CreateGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.CreateGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParticipantNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.freesplit.CreateGroupRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.CreateGroupRequest} returns this
 */
proto.freesplit.CreateGroupRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string currency = 2;
 * @return {string}
 */
proto.freesplit.CreateGroupRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.CreateGroupRequest} returns this
 */
proto.freesplit.CreateGroupRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string participant_names = 3;
 * @return {!Array<string>}
 */
proto.freesplit.CreateGroupRequest.prototype.getParticipantNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.freesplit.CreateGroupRequest} returns this
 */
proto.freesplit.CreateGroupRequest.prototype.setParticipantNamesList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.freesplit.CreateGroupRequest} returns this
 */
proto.freesplit.CreateGroupRequest.prototype.addParticipantNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.CreateGroupRequest} returns this
 */
proto.freesplit.CreateGroupRequest.prototype.clearParticipantNamesList = function() {
  return this.setParticipantNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.CreateGroupResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.CreateGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.CreateGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.CreateGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
group: (f = msg.getGroup()) && proto.freesplit.Group.toObject(includeInstance, f),
participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.freesplit.Participant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.CreateGroupResponse}
 */
proto.freesplit.CreateGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.CreateGroupResponse;
  return proto.freesplit.CreateGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.CreateGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.CreateGroupResponse}
 */
proto.freesplit.CreateGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Group;
      reader.readMessage(value,proto.freesplit.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    case 2:
      var value = new proto.freesplit.Participant;
      reader.readMessage(value,proto.freesplit.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.CreateGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.CreateGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.CreateGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.CreateGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Group.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.freesplit.Group}
 */
proto.freesplit.CreateGroupResponse.prototype.getGroup = function() {
  return /** @type{?proto.freesplit.Group} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Group, 1));
};


/**
 * @param {?proto.freesplit.Group|undefined} value
 * @return {!proto.freesplit.CreateGroupResponse} returns this
*/
proto.freesplit.CreateGroupResponse.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.CreateGroupResponse} returns this
 */
proto.freesplit.CreateGroupResponse.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.CreateGroupResponse.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Participant participants = 2;
 * @return {!Array<!proto.freesplit.Participant>}
 */
proto.freesplit.CreateGroupResponse.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.freesplit.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Participant, 2));
};


/**
 * @param {!Array<!proto.freesplit.Participant>} value
 * @return {!proto.freesplit.CreateGroupResponse} returns this
*/
proto.freesplit.CreateGroupResponse.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Participant}
 */
proto.freesplit.CreateGroupResponse.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.CreateGroupResponse} returns this
 */
proto.freesplit.CreateGroupResponse.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
urlSlug: jspb.Message.getFieldWithDefault(msg, 1, ""),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
currency: jspb.Message.getFieldWithDefault(msg, 3, ""),
participantId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateGroupRequest}
 */
proto.freesplit.UpdateGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateGroupRequest;
  return proto.freesplit.UpdateGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateGroupRequest}
 */
proto.freesplit.UpdateGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrlSlug(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCurrency(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateGroupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateGroupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrlSlug();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCurrency();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional string url_slug = 1;
 * @return {string}
 */
proto.freesplit.UpdateGroupRequest.prototype.getUrlSlug = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.UpdateGroupRequest} returns this
 */
proto.freesplit.UpdateGroupRequest.prototype.setUrlSlug = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.freesplit.UpdateGroupRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.UpdateGroupRequest} returns this
 */
proto.freesplit.UpdateGroupRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string currency = 3;
 * @return {string}
 */
proto.freesplit.UpdateGroupRequest.prototype.getCurrency = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.UpdateGroupRequest} returns this
 */
proto.freesplit.UpdateGroupRequest.prototype.setCurrency = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 participant_id = 4;
 * @return {number}
 */
proto.freesplit.UpdateGroupRequest.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.UpdateGroupRequest} returns this
 */
proto.freesplit.UpdateGroupRequest.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
group: (f = msg.getGroup()) && proto.freesplit.Group.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateGroupResponse}
 */
proto.freesplit.UpdateGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateGroupResponse;
  return proto.freesplit.UpdateGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateGroupResponse}
 */
proto.freesplit.UpdateGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Group;
      reader.readMessage(value,proto.freesplit.Group.deserializeBinaryFromReader);
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateGroupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateGroupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Group.serializeBinaryToWriter
    );
  }
};


/**
 * optional Group group = 1;
 * @return {?proto.freesplit.Group}
 */
proto.freesplit.UpdateGroupResponse.prototype.getGroup = function() {
  return /** @type{?proto.freesplit.Group} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Group, 1));
};


/**
 * @param {?proto.freesplit.Group|undefined} value
 * @return {!proto.freesplit.UpdateGroupResponse} returns this
*/
proto.freesplit.UpdateGroupResponse.prototype.setGroup = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.UpdateGroupResponse} returns this
 */
proto.freesplit.UpdateGroupResponse.prototype.clearGroup = function() {
  return this.setGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.UpdateGroupResponse.prototype.hasGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.AddParticipantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.AddParticipantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.AddParticipantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.AddParticipantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
groupId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.AddParticipantRequest}
 */
proto.freesplit.AddParticipantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.AddParticipantRequest;
  return proto.freesplit.AddParticipantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.AddParticipantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.AddParticipantRequest}
 */
proto.freesplit.AddParticipantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.AddParticipantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.AddParticipantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.AddParticipantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.AddParticipantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.freesplit.AddParticipantRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.AddParticipantRequest} returns this
 */
proto.freesplit.AddParticipantRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 group_id = 2;
 * @return {number}
 */
proto.freesplit.AddParticipantRequest.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.AddParticipantRequest} returns this
 */
proto.freesplit.AddParticipantRequest.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.AddParticipantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.AddParticipantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.AddParticipantResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.AddParticipantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
participant: (f = msg.getParticipant()) && proto.freesplit.Participant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.AddParticipantResponse}
 */
proto.freesplit.AddParticipantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.AddParticipantResponse;
  return proto.freesplit.AddParticipantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.AddParticipantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.AddParticipantResponse}
 */
proto.freesplit.AddParticipantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Participant;
      reader.readMessage(value,proto.freesplit.Participant.deserializeBinaryFromReader);
      msg.setParticipant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.AddParticipantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.AddParticipantResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.AddParticipantResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.AddParticipantResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * optional Participant participant = 1;
 * @return {?proto.freesplit.Participant}
 */
proto.freesplit.AddParticipantResponse.prototype.getParticipant = function() {
  return /** @type{?proto.freesplit.Participant} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Participant, 1));
};


/**
 * @param {?proto.freesplit.Participant|undefined} value
 * @return {!proto.freesplit.AddParticipantResponse} returns this
*/
proto.freesplit.AddParticipantResponse.prototype.setParticipant = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.AddParticipantResponse} returns this
 */
proto.freesplit.AddParticipantResponse.prototype.clearParticipant = function() {
  return this.setParticipant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.AddParticipantResponse.prototype.hasParticipant = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateParticipantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateParticipantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateParticipantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateParticipantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
participantId: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateParticipantRequest}
 */
proto.freesplit.UpdateParticipantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateParticipantRequest;
  return proto.freesplit.UpdateParticipantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateParticipantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateParticipantRequest}
 */
proto.freesplit.UpdateParticipantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateParticipantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateParticipantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateParticipantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateParticipantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.freesplit.UpdateParticipantRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.freesplit.UpdateParticipantRequest} returns this
 */
proto.freesplit.UpdateParticipantRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 participant_id = 2;
 * @return {number}
 */
proto.freesplit.UpdateParticipantRequest.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.UpdateParticipantRequest} returns this
 */
proto.freesplit.UpdateParticipantRequest.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateParticipantResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateParticipantResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateParticipantResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateParticipantResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
participant: (f = msg.getParticipant()) && proto.freesplit.Participant.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateParticipantResponse}
 */
proto.freesplit.UpdateParticipantResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateParticipantResponse;
  return proto.freesplit.UpdateParticipantResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateParticipantResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateParticipantResponse}
 */
proto.freesplit.UpdateParticipantResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Participant;
      reader.readMessage(value,proto.freesplit.Participant.deserializeBinaryFromReader);
      msg.setParticipant(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateParticipantResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateParticipantResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateParticipantResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateParticipantResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipant();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * optional Participant participant = 1;
 * @return {?proto.freesplit.Participant}
 */
proto.freesplit.UpdateParticipantResponse.prototype.getParticipant = function() {
  return /** @type{?proto.freesplit.Participant} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Participant, 1));
};


/**
 * @param {?proto.freesplit.Participant|undefined} value
 * @return {!proto.freesplit.UpdateParticipantResponse} returns this
*/
proto.freesplit.UpdateParticipantResponse.prototype.setParticipant = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.UpdateParticipantResponse} returns this
 */
proto.freesplit.UpdateParticipantResponse.prototype.clearParticipant = function() {
  return this.setParticipant(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.UpdateParticipantResponse.prototype.hasParticipant = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.DeleteParticipantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.DeleteParticipantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.DeleteParticipantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.DeleteParticipantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
participantId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.DeleteParticipantRequest}
 */
proto.freesplit.DeleteParticipantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.DeleteParticipantRequest;
  return proto.freesplit.DeleteParticipantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.DeleteParticipantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.DeleteParticipantRequest}
 */
proto.freesplit.DeleteParticipantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParticipantId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.DeleteParticipantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.DeleteParticipantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.DeleteParticipantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.DeleteParticipantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 participant_id = 1;
 * @return {number}
 */
proto.freesplit.DeleteParticipantRequest.prototype.getParticipantId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.DeleteParticipantRequest} returns this
 */
proto.freesplit.DeleteParticipantRequest.prototype.setParticipantId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetDebtsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetDebtsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetDebtsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetDebtsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
groupId: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetDebtsRequest}
 */
proto.freesplit.GetDebtsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetDebtsRequest;
  return proto.freesplit.GetDebtsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetDebtsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetDebtsRequest}
 */
proto.freesplit.GetDebtsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetDebtsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetDebtsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetDebtsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetDebtsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroupId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 group_id = 1;
 * @return {number}
 */
proto.freesplit.GetDebtsRequest.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.GetDebtsRequest} returns this
 */
proto.freesplit.GetDebtsRequest.prototype.setGroupId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.freesplit.GetDebtsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.GetDebtsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.GetDebtsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.GetDebtsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetDebtsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
debtsList: jspb.Message.toObjectList(msg.getDebtsList(),
    proto.freesplit.Debt.toObject, includeInstance),
participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.freesplit.Participant.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.GetDebtsResponse}
 */
proto.freesplit.GetDebtsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.GetDebtsResponse;
  return proto.freesplit.GetDebtsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.GetDebtsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.GetDebtsResponse}
 */
proto.freesplit.GetDebtsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Debt;
      reader.readMessage(value,proto.freesplit.Debt.deserializeBinaryFromReader);
      msg.addDebts(value);
      break;
    case 2:
      var value = new proto.freesplit.Participant;
      reader.readMessage(value,proto.freesplit.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.GetDebtsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.GetDebtsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.GetDebtsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.GetDebtsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebtsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.freesplit.Debt.serializeBinaryToWriter
    );
  }
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.freesplit.Participant.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Debt debts = 1;
 * @return {!Array<!proto.freesplit.Debt>}
 */
proto.freesplit.GetDebtsResponse.prototype.getDebtsList = function() {
  return /** @type{!Array<!proto.freesplit.Debt>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Debt, 1));
};


/**
 * @param {!Array<!proto.freesplit.Debt>} value
 * @return {!proto.freesplit.GetDebtsResponse} returns this
*/
proto.freesplit.GetDebtsResponse.prototype.setDebtsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.freesplit.Debt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Debt}
 */
proto.freesplit.GetDebtsResponse.prototype.addDebts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.freesplit.Debt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetDebtsResponse} returns this
 */
proto.freesplit.GetDebtsResponse.prototype.clearDebtsList = function() {
  return this.setDebtsList([]);
};


/**
 * repeated Participant participants = 2;
 * @return {!Array<!proto.freesplit.Participant>}
 */
proto.freesplit.GetDebtsResponse.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.freesplit.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.freesplit.Participant, 2));
};


/**
 * @param {!Array<!proto.freesplit.Participant>} value
 * @return {!proto.freesplit.GetDebtsResponse} returns this
*/
proto.freesplit.GetDebtsResponse.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.freesplit.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.freesplit.Participant}
 */
proto.freesplit.GetDebtsResponse.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.freesplit.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.freesplit.GetDebtsResponse} returns this
 */
proto.freesplit.GetDebtsResponse.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateDebtPaidAmountRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateDebtPaidAmountRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
debtId: jspb.Message.getFieldWithDefault(msg, 1, 0),
paidAmount: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateDebtPaidAmountRequest}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateDebtPaidAmountRequest;
  return proto.freesplit.UpdateDebtPaidAmountRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateDebtPaidAmountRequest}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDebtId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPaidAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateDebtPaidAmountRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateDebtPaidAmountRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebtId();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPaidAmount();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int32 debt_id = 1;
 * @return {number}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.getDebtId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.UpdateDebtPaidAmountRequest} returns this
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.setDebtId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double paid_amount = 2;
 * @return {number}
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.getPaidAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.freesplit.UpdateDebtPaidAmountRequest} returns this
 */
proto.freesplit.UpdateDebtPaidAmountRequest.prototype.setPaidAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.freesplit.UpdateDebtPaidAmountResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.freesplit.UpdateDebtPaidAmountResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateDebtPaidAmountResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
debt: (f = msg.getDebt()) && proto.freesplit.Debt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.freesplit.UpdateDebtPaidAmountResponse}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.freesplit.UpdateDebtPaidAmountResponse;
  return proto.freesplit.UpdateDebtPaidAmountResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.freesplit.UpdateDebtPaidAmountResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.freesplit.UpdateDebtPaidAmountResponse}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.freesplit.Debt;
      reader.readMessage(value,proto.freesplit.Debt.deserializeBinaryFromReader);
      msg.setDebt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.freesplit.UpdateDebtPaidAmountResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.freesplit.UpdateDebtPaidAmountResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.freesplit.UpdateDebtPaidAmountResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.freesplit.Debt.serializeBinaryToWriter
    );
  }
};


/**
 * optional Debt debt = 1;
 * @return {?proto.freesplit.Debt}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.getDebt = function() {
  return /** @type{?proto.freesplit.Debt} */ (
    jspb.Message.getWrapperField(this, proto.freesplit.Debt, 1));
};


/**
 * @param {?proto.freesplit.Debt|undefined} value
 * @return {!proto.freesplit.UpdateDebtPaidAmountResponse} returns this
*/
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.setDebt = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.freesplit.UpdateDebtPaidAmountResponse} returns this
 */
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.clearDebt = function() {
  return this.setDebt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.freesplit.UpdateDebtPaidAmountResponse.prototype.hasDebt = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.freesplit);
