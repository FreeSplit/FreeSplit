/**
 * @fileoverview gRPC-Web generated client stub for freesplit
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.32.0
// source: src/proto/expense.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js')
const proto = {};
proto.freesplit = require('./expense_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.ExpenseServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.ExpenseServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.GetExpensesByGroupRequest,
 *   !proto.freesplit.GetExpensesByGroupResponse>}
 */
const methodDescriptor_ExpenseService_GetExpensesByGroup = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/GetExpensesByGroup',
  grpc.web.MethodType.UNARY,
  proto.freesplit.GetExpensesByGroupRequest,
  proto.freesplit.GetExpensesByGroupResponse,
  /**
   * @param {!proto.freesplit.GetExpensesByGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.GetExpensesByGroupResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.GetExpensesByGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.GetExpensesByGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.GetExpensesByGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.getExpensesByGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/GetExpensesByGroup',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetExpensesByGroup,
      callback);
};


/**
 * @param {!proto.freesplit.GetExpensesByGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.GetExpensesByGroupResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.getExpensesByGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/GetExpensesByGroup',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetExpensesByGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.GetSplitsByParticipantRequest,
 *   !proto.freesplit.GetSplitsByParticipantResponse>}
 */
const methodDescriptor_ExpenseService_GetSplitsByParticipant = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/GetSplitsByParticipant',
  grpc.web.MethodType.UNARY,
  proto.freesplit.GetSplitsByParticipantRequest,
  proto.freesplit.GetSplitsByParticipantResponse,
  /**
   * @param {!proto.freesplit.GetSplitsByParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.GetSplitsByParticipantResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.GetSplitsByParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.GetSplitsByParticipantResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.GetSplitsByParticipantResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.getSplitsByParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/GetSplitsByParticipant',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetSplitsByParticipant,
      callback);
};


/**
 * @param {!proto.freesplit.GetSplitsByParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.GetSplitsByParticipantResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.getSplitsByParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/GetSplitsByParticipant',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetSplitsByParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.GetExpenseWithSplitsRequest,
 *   !proto.freesplit.GetExpenseWithSplitsResponse>}
 */
const methodDescriptor_ExpenseService_GetExpenseWithSplits = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/GetExpenseWithSplits',
  grpc.web.MethodType.UNARY,
  proto.freesplit.GetExpenseWithSplitsRequest,
  proto.freesplit.GetExpenseWithSplitsResponse,
  /**
   * @param {!proto.freesplit.GetExpenseWithSplitsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.GetExpenseWithSplitsResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.GetExpenseWithSplitsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.GetExpenseWithSplitsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.GetExpenseWithSplitsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.getExpenseWithSplits =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/GetExpenseWithSplits',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetExpenseWithSplits,
      callback);
};


/**
 * @param {!proto.freesplit.GetExpenseWithSplitsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.GetExpenseWithSplitsResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.getExpenseWithSplits =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/GetExpenseWithSplits',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_GetExpenseWithSplits);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.CreateExpenseRequest,
 *   !proto.freesplit.CreateExpenseResponse>}
 */
const methodDescriptor_ExpenseService_CreateExpense = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/CreateExpense',
  grpc.web.MethodType.UNARY,
  proto.freesplit.CreateExpenseRequest,
  proto.freesplit.CreateExpenseResponse,
  /**
   * @param {!proto.freesplit.CreateExpenseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.CreateExpenseResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.CreateExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.CreateExpenseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.CreateExpenseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.createExpense =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/CreateExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_CreateExpense,
      callback);
};


/**
 * @param {!proto.freesplit.CreateExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.CreateExpenseResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.createExpense =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/CreateExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_CreateExpense);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.UpdateExpenseRequest,
 *   !proto.freesplit.UpdateExpenseResponse>}
 */
const methodDescriptor_ExpenseService_UpdateExpense = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/UpdateExpense',
  grpc.web.MethodType.UNARY,
  proto.freesplit.UpdateExpenseRequest,
  proto.freesplit.UpdateExpenseResponse,
  /**
   * @param {!proto.freesplit.UpdateExpenseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.UpdateExpenseResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.UpdateExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.UpdateExpenseResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.UpdateExpenseResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.updateExpense =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/UpdateExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_UpdateExpense,
      callback);
};


/**
 * @param {!proto.freesplit.UpdateExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.UpdateExpenseResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.updateExpense =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/UpdateExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_UpdateExpense);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.DeleteExpenseRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_ExpenseService_DeleteExpense = new grpc.web.MethodDescriptor(
  '/freesplit.ExpenseService/DeleteExpense',
  grpc.web.MethodType.UNARY,
  proto.freesplit.DeleteExpenseRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.freesplit.DeleteExpenseRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.freesplit.DeleteExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ExpenseServiceClient.prototype.deleteExpense =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ExpenseService/DeleteExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_DeleteExpense,
      callback);
};


/**
 * @param {!proto.freesplit.DeleteExpenseRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.freesplit.ExpenseServicePromiseClient.prototype.deleteExpense =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ExpenseService/DeleteExpense',
      request,
      metadata || {},
      methodDescriptor_ExpenseService_DeleteExpense);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.GroupServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.GroupServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.GetGroupRequest,
 *   !proto.freesplit.GetGroupResponse>}
 */
const methodDescriptor_GroupService_GetGroup = new grpc.web.MethodDescriptor(
  '/freesplit.GroupService/GetGroup',
  grpc.web.MethodType.UNARY,
  proto.freesplit.GetGroupRequest,
  proto.freesplit.GetGroupResponse,
  /**
   * @param {!proto.freesplit.GetGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.GetGroupResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.GetGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.GetGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.GetGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.GroupServiceClient.prototype.getGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.GroupService/GetGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_GetGroup,
      callback);
};


/**
 * @param {!proto.freesplit.GetGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.GetGroupResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.GroupServicePromiseClient.prototype.getGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.GroupService/GetGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_GetGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.CreateGroupRequest,
 *   !proto.freesplit.CreateGroupResponse>}
 */
const methodDescriptor_GroupService_CreateGroup = new grpc.web.MethodDescriptor(
  '/freesplit.GroupService/CreateGroup',
  grpc.web.MethodType.UNARY,
  proto.freesplit.CreateGroupRequest,
  proto.freesplit.CreateGroupResponse,
  /**
   * @param {!proto.freesplit.CreateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.CreateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.CreateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.CreateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.GroupServiceClient.prototype.createGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.GroupService/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroup,
      callback);
};


/**
 * @param {!proto.freesplit.CreateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.CreateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.GroupServicePromiseClient.prototype.createGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.GroupService/CreateGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_CreateGroup);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.UpdateGroupRequest,
 *   !proto.freesplit.UpdateGroupResponse>}
 */
const methodDescriptor_GroupService_UpdateGroup = new grpc.web.MethodDescriptor(
  '/freesplit.GroupService/UpdateGroup',
  grpc.web.MethodType.UNARY,
  proto.freesplit.UpdateGroupRequest,
  proto.freesplit.UpdateGroupResponse,
  /**
   * @param {!proto.freesplit.UpdateGroupRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.UpdateGroupResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.UpdateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.UpdateGroupResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.UpdateGroupResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.GroupServiceClient.prototype.updateGroup =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.GroupService/UpdateGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroup,
      callback);
};


/**
 * @param {!proto.freesplit.UpdateGroupRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.UpdateGroupResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.GroupServicePromiseClient.prototype.updateGroup =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.GroupService/UpdateGroup',
      request,
      metadata || {},
      methodDescriptor_GroupService_UpdateGroup);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.ParticipantServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.ParticipantServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.AddParticipantRequest,
 *   !proto.freesplit.AddParticipantResponse>}
 */
const methodDescriptor_ParticipantService_AddParticipant = new grpc.web.MethodDescriptor(
  '/freesplit.ParticipantService/AddParticipant',
  grpc.web.MethodType.UNARY,
  proto.freesplit.AddParticipantRequest,
  proto.freesplit.AddParticipantResponse,
  /**
   * @param {!proto.freesplit.AddParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.AddParticipantResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.AddParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.AddParticipantResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.AddParticipantResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ParticipantServiceClient.prototype.addParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ParticipantService/AddParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_AddParticipant,
      callback);
};


/**
 * @param {!proto.freesplit.AddParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.AddParticipantResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ParticipantServicePromiseClient.prototype.addParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ParticipantService/AddParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_AddParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.UpdateParticipantRequest,
 *   !proto.freesplit.UpdateParticipantResponse>}
 */
const methodDescriptor_ParticipantService_UpdateParticipant = new grpc.web.MethodDescriptor(
  '/freesplit.ParticipantService/UpdateParticipant',
  grpc.web.MethodType.UNARY,
  proto.freesplit.UpdateParticipantRequest,
  proto.freesplit.UpdateParticipantResponse,
  /**
   * @param {!proto.freesplit.UpdateParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.UpdateParticipantResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.UpdateParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.UpdateParticipantResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.UpdateParticipantResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ParticipantServiceClient.prototype.updateParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ParticipantService/UpdateParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_UpdateParticipant,
      callback);
};


/**
 * @param {!proto.freesplit.UpdateParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.UpdateParticipantResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.ParticipantServicePromiseClient.prototype.updateParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ParticipantService/UpdateParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_UpdateParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.DeleteParticipantRequest,
 *   !proto.google.protobuf.Empty>}
 */
const methodDescriptor_ParticipantService_DeleteParticipant = new grpc.web.MethodDescriptor(
  '/freesplit.ParticipantService/DeleteParticipant',
  grpc.web.MethodType.UNARY,
  proto.freesplit.DeleteParticipantRequest,
  google_protobuf_empty_pb.Empty,
  /**
   * @param {!proto.freesplit.DeleteParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  google_protobuf_empty_pb.Empty.deserializeBinary
);


/**
 * @param {!proto.freesplit.DeleteParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.google.protobuf.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.google.protobuf.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.ParticipantServiceClient.prototype.deleteParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.ParticipantService/DeleteParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_DeleteParticipant,
      callback);
};


/**
 * @param {!proto.freesplit.DeleteParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.google.protobuf.Empty>}
 *     Promise that resolves to the response
 */
proto.freesplit.ParticipantServicePromiseClient.prototype.deleteParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.ParticipantService/DeleteParticipant',
      request,
      metadata || {},
      methodDescriptor_ParticipantService_DeleteParticipant);
};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.DebtServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.freesplit.DebtServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.GetDebtsRequest,
 *   !proto.freesplit.GetDebtsResponse>}
 */
const methodDescriptor_DebtService_GetDebts = new grpc.web.MethodDescriptor(
  '/freesplit.DebtService/GetDebts',
  grpc.web.MethodType.UNARY,
  proto.freesplit.GetDebtsRequest,
  proto.freesplit.GetDebtsResponse,
  /**
   * @param {!proto.freesplit.GetDebtsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.GetDebtsResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.GetDebtsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.GetDebtsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.GetDebtsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.DebtServiceClient.prototype.getDebts =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.DebtService/GetDebts',
      request,
      metadata || {},
      methodDescriptor_DebtService_GetDebts,
      callback);
};


/**
 * @param {!proto.freesplit.GetDebtsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.GetDebtsResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.DebtServicePromiseClient.prototype.getDebts =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.DebtService/GetDebts',
      request,
      metadata || {},
      methodDescriptor_DebtService_GetDebts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.freesplit.UpdateDebtPaidAmountRequest,
 *   !proto.freesplit.UpdateDebtPaidAmountResponse>}
 */
const methodDescriptor_DebtService_UpdateDebtPaidAmount = new grpc.web.MethodDescriptor(
  '/freesplit.DebtService/UpdateDebtPaidAmount',
  grpc.web.MethodType.UNARY,
  proto.freesplit.UpdateDebtPaidAmountRequest,
  proto.freesplit.UpdateDebtPaidAmountResponse,
  /**
   * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.freesplit.UpdateDebtPaidAmountResponse.deserializeBinary
);


/**
 * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.freesplit.UpdateDebtPaidAmountResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.freesplit.UpdateDebtPaidAmountResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.freesplit.DebtServiceClient.prototype.updateDebtPaidAmount =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/freesplit.DebtService/UpdateDebtPaidAmount',
      request,
      metadata || {},
      methodDescriptor_DebtService_UpdateDebtPaidAmount,
      callback);
};


/**
 * @param {!proto.freesplit.UpdateDebtPaidAmountRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.freesplit.UpdateDebtPaidAmountResponse>}
 *     Promise that resolves to the response
 */
proto.freesplit.DebtServicePromiseClient.prototype.updateDebtPaidAmount =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/freesplit.DebtService/UpdateDebtPaidAmount',
      request,
      metadata || {},
      methodDescriptor_DebtService_UpdateDebtPaidAmount);
};


module.exports = proto.freesplit;

